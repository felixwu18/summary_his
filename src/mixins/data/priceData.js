/**
 * 比亚迪
 */
export default {
    data() {
        return {
            dataObj: {
                byd: {
                    // name: '比亚迪',
                    // klines: ["2020-05-27,59.60,57.30,59.95,57.07,113617,662802624.00,4.94,-1.72,-1.00,1.00",
                    //     "2020-05-28,57.35,57.48,58.23,56.40,86300,494679184.00,3.19,0.31,0.18,0.76",
                    //     "2020-05-29,57.12,57.41,58.02,56.81,68036,390882864.00,2.11,-0.12,-0.07,0.60",
                    //     "2020-06-01,57.75,59.33,59.69,57.44,161068,949983296.00,3.92,3.34,1.92,1.41",
                    //     "2020-06-02,59.57,61.00,62.18,58.88,204796,1235513472.00,5.56,2.81,1.67,1.79",
                    //     "2020-06-03,60.79,59.93,61.05,59.48,146357,882603744.00,2.57,-1.75,-1.07,1.28",
                    //     "2020-06-04,60.48,60.11,61.20,59.71,105743,637797408.00,2.49,0.30,0.18,0.93",
                    //     "2020-06-05,61.00,63.20,63.28,60.33,265451,1643855456.00,4.91,5.14,3.09,2.33", "2020-06-08,63.00,62.79,63.83,62.45,172441,1087013120.00,2.18,-0.65,-0.41,1.51", "2020-06-09,63.00,61.98,64.41,61.69,204431,1285542240.00,4.33,-1.29,-0.81,1.79", "2020-06-10,62.26,61.05,62.42,60.68,186194,1140629408.00,2.81,-1.50,-0.93,1.63", "2020-06-11,61.87,62.84,64.20,61.51,280233,1764678736.00,4.41,2.93,1.79,2.45", "2020-06-12,61.40,61.48,61.93,60.63,175497,1075893056.00,2.07,-2.16,-1.36,1.54", "2020-06-15,62.50,62.50,63.88,61.25,195740,1225432624.00,4.28,1.66,1.02,1.71", "2020-06-16,63.80,64.10,64.46,63.13,214116,1367780384.00,2.13,2.56,1.60,1.88", "2020-06-17,64.00,64.11,64.11,62.36,144378,912074336.00,2.73,0.02,0.01,1.26", "2020-06-18,63.80,66.74,66.76,62.94,279033,1829902640.00,5.96,4.10,2.63,2.44", "2020-06-19,66.69,66.99,68.68,66.30,220619,1487253008.00,3.57,0.37,0.25,1.93", "2020-06-22,66.60,68.00,68.78,66.29,196255,1325805168.00,3.72,1.51,1.01,1.72", "2020-06-23,67.57,71.03,72.09,67.00,260375,1812606800.00,7.49,4.46,3.03,2.28", "2020-06-24,71.10,71.70,73.06,70.76,196681,1414432112.00,3.24,0.94,0.67,1.72", "2020-06-29,71.50,70.60,72.43,70.30,173376,1233307824.00,2.97,-1.53,-1.10,1.52", "2020-06-30,71.41,71.80,72.85,70.87,169831,1223207520.00,2.80,1.70,1.20,1.48", "2020-07-01,73.21,72.47,75.45,71.03,235093,1726221248.00,6.16,0.93,0.67,2.05", "2020-07-02,72.63,72.14,74.61,71.80,214074,1559734672.00,3.88,-0.46,-0.33,1.87", "2020-07-03,73.30,79.35,79.35,73.23,455388,3497719616.00,8.48,9.99,7.21,3.97", "2020-07-06,79.33,80.90,81.59,77.41,461224,3661516240.00,5.27,1.95,1.55,4.03", "2020-07-07,84.76,83.00,88.50,83.00,466706,3978641296.00,6.80,2.60,2.10,4.07", "2020-07-08,81.94,82.75,84.28,81.86,319156,2647763136.00,2.92,-0.30,-0.25,2.79", "2020-07-09,82.75,84.46,86.30,81.46,327974,2764110592.00,5.85,2.07,1.71,2.86", "2020-07-10,84.47,89.00,92.36,83.05,396029,3495161216.00,11.02,5.38,4.54,3.46", "2020-07-13,92.60,97.90,97.90,92.29,579871,5536512768.00,6.30,10.00,8.90,5.06", "2020-07-14,97.90,96.55,97.91,90.58,536389,5075817472.00,7.49,-1.38,-1.35,4.68", "2020-07-15,97.00,94.50,97.29,92.69,388696,3699030992.00,4.76,-2.12,-2.05,3.39", "2020-07-16,94.40,85.05,95.50,85.05,560467,4984540928.00,11.06,-10.00,-9.45,4.89", "2020-07-17,83.02,81.59,85.36,80.07,430969,3549101616.00,6.22,-4.07,-3.46,3.76", "2020-07-20,83.70,87.17,89.30,81.61,431730,3684539648.00,9.43,6.84,5.58,3.77", "2020-07-21,89.90,88.09,91.33,87.68,317222,2834375728.00,4.19,1.06,0.92,2.77", "2020-07-22,86.00,87.19,89.48,85.50,269545,2367987136.00,4.52,-1.02,-0.90,2.35", "2020-07-23,86.06,88.99,89.00,85.58,327287,2869841088.00,3.92,2.06,1.80,2.86", "2020-07-24,87.78,83.00,88.14,82.50,388174,3298033872.00,6.34,-6.73,-5.99,3.39", "2020-07-27,83.50,83.52,85.20,82.30,208828,1753284464.00,3.49,0.63,0.52,1.82", "2020-07-28,85.98,83.91,86.66,83.00,216441,1829407616.00,4.38,0.47,0.39,1.89", "2020-07-29,83.31,86.93,87.50,82.52,287976,2464892400.00,5.93,3.60,3.02,2.51", "2020-07-30,87.02,85.00,87.63,84.30,224493,1917850496.00,3.83,-2.22,-1.93,1.96", "2020-07-31,84.96,85.39,86.66,83.46,258123,2201963264.00,3.76,0.46,0.39,2.25", "2020-08-03,85.41,86.17,86.50,84.40,280304,2394349088.00,2.46,0.91,0.78,2.45", "2020-08-04,86.95,89.00,91.00,86.88,383956,3414415344.00,4.78,3.28,2.83,3.35", "2020-08-05,89.00,88.15,89.00,86.58,190227,1667411296.00,2.72,-0.96,-0.85,1.66", "2020-08-06,88.81,88.73,89.60,87.00,205333,1815887520.00,2.95,0.66,0.58,1.79", "2020-08-07,87.60,85.38,88.76,83.81,245974,2120266848.00,5.58,-3.78,-3.35,2.15", "2020-08-10,83.79,81.98,84.35,80.00,336539,2752165152.00,5.09,-3.98,-3.40,2.94", "2020-08-11,81.90,81.00,83.20,80.95,194173,1596334592.00,2.74,-1.20,-0.98,1.69", "2020-08-12,81.18,81.98,81.98,78.45,220972,1768144496.00,4.36,1.21,0.98,1.93", "2020-08-13,83.50,81.80,83.80,81.65,135828,1119875376.00,2.62,-0.22,-0.18,1.19", "2020-08-14,82.10,81.93,82.59,80.00,120620,981262736.00,3.17,0.16,0.13,1.05", "2020-08-17,82.20,82.92,83.23,81.33,151032,1246372800.00,2.32,1.21,0.99,1.32", "2020-08-18,84.01,82.18,84.51,81.80,161553,1335564960.00,3.27,-0.89,-0.74,1.41", "2020-08-19,81.40,79.65,81.64,79.52,187358,1504274096.00,2.58,-3.08,-2.53,1.64", "2020-08-20,79.64,78.55,80.00,78.10,122724,967851104.00,2.39,-1.38,-1.10,1.07", "2020-08-21,80.00,79.58,80.64,78.90,111905,893244016.00,2.22,1.31,1.03,0.98", "2020-08-24,79.90,81.44,82.28,79.69,171281,1384872480.00,3.25,2.34,1.86,1.50", "2020-08-25,81.00,81.24,82.88,80.50,145106,1182126000.00,2.92,-0.25,-0.20,1.27", "2020-08-26,82.00,83.42,85.31,81.68,320472,2691953344.00,4.47,2.68,2.18,2.80", "2020-08-27,86.50,85.42,87.55,84.70,252035,2168640352.00,3.42,2.40,2.00,2.20", "2020-08-28,85.00,85.39,86.06,83.02,186470,1572760240.00,3.56,-0.04,-0.03,1.63", "2020-08-31,87.02,85.00,88.22,84.88,215347,1864842720.00,3.91,-0.46,-0.39,1.88", "2020-09-01,86.99,93.50,93.50,86.31,394613,3573272704.00,8.46,10.00,8.50,3.44", "2020-09-02,95.88,94.30,96.00,91.63,397047,3719378784.00,4.67,0.86,0.80,3.47", "2020-09-03,92.88,92.59,95.16,92.15,227795,2129704432.00,3.19,-1.81,-1.71,1.99", "2020-09-04,88.80,90.00,90.59,88.02,222021,1979126656.00,2.78,-2.80,-2.59,1.94", "2020-09-07,89.48,94.74,97.50,89.40,409987,3862436336.00,9.00,5.27,4.74,3.58", "2020-09-08,95.88,91.00,95.88,90.70,279084,2590896624.00,5.47,-3.95,-3.74,2.44", "2020-09-09,88.01,85.99,88.70,84.85,263292,2281813616.00,4.23,-5.51,-5.01,2.30", "2020-09-10,87.84,87.09,90.17,86.90,217063,1923920288.00,3.80,1.28,1.10,1.89", "2020-09-11,87.85,91.20,91.20,87.22,205764,1843068560.00,4.57,4.72,4.11,1.80", "2020-09-14,91.30,92.50,94.50,91.30,223839,2078549008.00,3.51,1.43,1.30,1.95", "2020-09-15,94.01,101.30,101.75,93.50,579221,5761285376.00,8.92,9.51,8.80,5.06", "2020-09-16,100.28,105.40,107.87,99.00,493789,5154280704.00,8.76,4.05,4.10,4.31", "2020-09-17,105.51,115.94,115.94,105.15,602351,6707262720.00,10.24,10.00,10.54,5.26", "2020-09-18,113.99,115.50,115.50,111.50,473754,5363840000.00,3.45,-0.38,-0.44,4.14", "2020-09-21,116.00,105.77,119.32,104.34,588771,6535043584.00,12.97,-8.42,-9.73,5.14", "2020-09-22,106.50,106.77,110.65,104.01,462882,4971987456.00,6.28,0.95,1.00,4.04", "2020-09-23,109.00,110.40,111.01,106.30,381409,4146613360.00,4.41,3.40,3.63,3.33", "2020-09-24,107.88,106.40,110.03,106.01,266126,2864183120.00,3.64,-3.62,-4.00,2.32", "2020-09-25,108.20,105.09,109.79,103.80,324363,3457966848.00,5.63,-1.23,-1.31,2.83", "2020-09-28,106.19,106.40,108.10,105.65,211883,2260356208.00,2.33,1.25,1.31,1.85", "2020-09-29,108.59,107.89,109.51,104.25,270046,2884125024.00,4.94,1.40,1.49,2.36", "2020-09-30,108.58,116.24,118.23,107.10,444201,5073415168.00,10.32,7.74,8.35,3.88", "2020-10-09,123.10,120.35,126.14,119.20,559678,6870685696.00,5.97,3.54,4.11,4.89", "2020-10-12,123.80,128.50,129.03,120.45,528089,6521180672.00,7.13,6.77,8.15,4.61", "2020-10-13,128.00,129.29,131.88,125.00,460527,5958597888.00,5.35,0.61,0.79,4.02", "2020-10-14,129.15,130.50,132.32,128.10,310472,4041272256.00,3.26,0.94,1.21,2.71", "2020-10-15,134.60,131.55,137.73,131.33,402893,5425288448.00,4.90,0.80,1.05,3.52", "2020-10-16,132.56,127.80,133.85,125.00,413536,5301212672.00,6.73,-2.85,-3.75,3.61", "2020-10-19,128.00,128.08,129.81,126.30,222006,2832538848.00,2.75,0.22,0.28,1.94", "2020-10-20,126.18,140.00,140.33,126.18,541679,7240427520.00,11.05,9.31,11.92,4.73", "2020-10-21,137.99,137.50,139.70,134.17,380567,5212917504.00,3.95,-1.79,-2.50,3.32",
                    //     "2020-10-22,137.23,143.79,145.00,132.07,434389,6061014016.00,9.40,4.57,6.29,3.79",
                    //     "2020-10-23,142.02,138.67,145.78,136.50,400994,5645291264.00,6.45,-3.56,-5.12,3.50",
                    //     "2020-10-26,136.50,139.96,142.85,133.10,309796,4319369728.00,7.03,0.93,1.29,2.70",
                    //     "2020-10-27,137.42,140.28,141.50,135.83,296545,4122784512.00,4.05,0.23,0.32,2.59",
                    //     "2020-10-28,139.51,151.60,153.48,139.02,517974,7669731584.00,10.31,8.07,11.32,4.52",
                    //     "2020-10-29,147.91,158.38,166.76,147.91,634705,10022998784.00,12.43,4.47,6.78,5.54",
                    //     "2020-10-30,160.00,159.81,170.30,154.20,673292,10882457088.00,10.17,0.90,1.43,5.88",
                    //     "2020-11-02,160.91,167.98,168.75,160.50,524911,8660252672.00,5.16,5.11,8.17,4.58",
                    //     "2020-11-03,172.00,164.08,172.45,159.58,661617,10960743424.00,7.66,-2.32,-3.90,5.77",
                    //     "2020-11-04,167.00,168.03,170.33,163.00,460948,7689440256.00,4.47,2.41,3.95,4.02",
                    //     "2020-11-05,175.00,184.83,184.83,171.00,674092,11951954688.00,8.23,10.00,16.80,5.88",
                    //     "2020-11-06,189.50,190.44,198.85,179.89,807667,15261971968.00,10.26,3.04,5.61,7.05",
                    //     "2020-11-09,191.60,190.95,193.67,184.12,525016,9934097152.00,5.01,0.27,0.51,4.58",
                    //     "2020-11-10,186.86,182.58,186.88,176.88,635350,11543486464.00,5.24,-4.38,-8.37,5.55",
                    //     "2020-11-11,176.90,164.35,181.89,164.32,805675,13840949760.00,9.62,-9.98,-18.23,7.03",
                    //     "2020-11-12,168.00,169.33,173.30,165.78,586640,9953360384.00,4.58,3.03,4.98,5.12",
                    //     "2020-11-13,180.00,175.90,182.02,173.29,609194,10790305792.00,5.16,3.88,6.57,5.32",
                    //     "2020-11-16,171.03,170.02,171.50,163.50,542565,9094656000.00,4.55,-3.34,-5.88,4.74",
                    //     "2020-11-17,173.50,167.00,175.18,164.46,568409,9641027072.00,6.31,-1.78,-3.02,4.96",
                    //     "2020-11-18,165.88,167.00,169.18,162.25,417033,6941379072.00,4.15,0.00,0.00,3.64",
                    //     "2020-11-19,168.00,161.62,168.70,159.52,470054,7652210688.00,5.50,-3.22,-5.38,4.10",
                    //     "2020-11-20,164.65,176.06,177.24,163.22,707527,12067220480.00,8.67,8.93,14.44,6.18"
                    // ]
                }
            },
            bydN: [],
            option: {
                // 3 指定图表的配置项和数据
                title: {
                    text: "布林上轨",
                },
                grid: {
                    left: "3%",
                    right: "4%",
                    bottom: "30%",
                    containLabel: true,
                },

                tooltip: {
                    trigger: "axis",
                    axisPointer: {
                        type: "cross",
                        label: {
                            backgroundColor: "red",
                        },
                    },
                },
                xAxis: {
                    type: "category",
                    data: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
                },
                yAxis: {
                    type: "value",
                },
                series: [
                    {
                        name: "布林上轨",
                        data: [820, 932, 901, 934, 1290, 1330, 1320],
                        type: "line",
                    },
                ],
            },
        };
    },
    methods: {
        /* 拿到画布处理好的基本数据，并渲染 */
        mixinInit() {
            const averages = this.dynamicGet20Day().reverse() || [] // 将时间升序
            const date_arr = averages.map(obj => obj.date) || []
            const upper_arr = [
                {name: '布林上轨', data: averages.map(obj => obj.upper), type: 'line'},
                {name: '收盘价格', data: averages.map(obj => obj.currentP), type: 'line'},
                {name: '布林中轨', data: averages.map(obj => obj.average20), type: 'line'},
            ] || []
            const ratio_arr = [
                {name: '斜率', data: averages.map(obj => obj.ratio), type: 'line'}, 
            ] || []
            /*  5% 以下：窄
                10% ：正常
                20% 以上: 宽 (做区间)
            */
            const bollwidth_arr = [
                {name: '带宽', data: averages.map(obj => obj.bollWidth), type: 'line'},
            ] || []
            const bollWidthRatio_arr = [
                {name: '带宽斜率', data: averages.map(obj => obj.bollWidthRatio), type: 'line'},
            ] || []
            /* 画布个数 */
            const datas = [
                { date: date_arr, data: upper_arr },
                { date: date_arr, data: ratio_arr },
                { date: date_arr, data: bollwidth_arr },
                { date: date_arr, data: bollWidthRatio_arr },
            ]
            /* 循环绘制图表 */
            datas.forEach((every, index) => {
                const { date, data } = every
                this.updateConfig({ date, data })
                const temp = JSON.parse(JSON.stringify(this.option))
                setTimeout(() => {
                    this.myCharts[`myChart${index}`].setOption(temp); // 延时画布生成
                    // this.myCharts .myChart0.setOption(temp); // 延时画布生成
                    // this.myCharts .myChart1.setOption(temp); // 延时画布生成
                }, 300)
            })
        },
        /* 标准差 */
        getStd(arr) {
            var sum = function (x, y) { return x * 1 + y * 1; };　　//求和函数
            var square = function (x) { return x * x; };　　//数组中每个元素求它的平方
            // var arr = [1,1,3,5,5];　　//
            var mean = arr.reduce(sum) / arr.length;
            var deviations = arr.map(function (x) { return x - mean; });
            var stddev = Math.sqrt(deviations.map(square).reduce(sum) / (arr.length - 1));
            return stddev.toFixed(2)
        },
        /* 返回基础数据的对象 */
        to20Average(data) {
            // const temp = []
            // dataObj.byd.reverse()
            // const data = dataObj.byd.reverse() // 取前20天
            let sum20 = null;
            let average = null
            const price20 = []
            let std = null
            data.forEach((str, index) => { // 降序时间
                const todayPrice = str.split(',')[2] // 取收盘价
                // todayPrice && temp.push(todayPrice)
                sum20 += todayPrice * 1
                price20.push(todayPrice)
            })
            average = (sum20 / 20).toFixed(2) * 1 // 当天20均
            std = this.getStd(price20) * 1 // 计算标准差
            /* 组装数据 */
            const todayInfos = data[0].split(',')
            return {
                date: todayInfos[0],
                upper: (average * 1 + 2 * std * 1).toFixed(2),  // 布林通道上轨
                lower: (average * 1 - 2 * std * 1).toFixed(2),  // 布林通道下轨
                currentP: todayInfos[2],
                average20: average // 当天20均价格(MD)
            }
        },
        dynamicGet20Day() {
            const averages = [];
            if(!this.dataObj.byd) { return }
            const data = this.dataObj.byd.klines.reverse();
            for (let i = 0; i < 20; i++) {
                const every = data.slice(i, i + 20); // 动态获取每天前20天收盘价
                const average = this.to20Average(every) // 计算出每天的布林通道上轨
                averages.push(average)
            }
            /* 单独处理加斜率 ratio ， 布林带宽 */
            averages.forEach((item, index) => {
                item.ratio = this.getRatio(item, averages[index + 1])
                item.bollWidth = this.getBollWidth(item)
            })
            /* 单独处理带宽斜率 */
            averages.forEach((item, index) => {
                item.bollWidthRatio = this.getBollWidthRatio(item, averages[index + 1])
            })
            return averages
        },
        /* 获取upper的斜率 */
        getRatio(suf, pre) { // pre时间前一天， suf后一天
            if (!pre) { return '-' }
            const ratio = (suf.upper - pre.upper) / pre.upper
            return `${((ratio) * 100).toFixed(2)}`
        },
        /* 获取带宽变化的斜率 */
        getBollWidthRatio(suf, pre) { // pre时间前一天， suf后一天
            if (!pre) { return '-' }
            const bollWidthRatio = (suf.bollWidth - pre.bollWidth) / pre.bollWidth
            return `${((bollWidthRatio) * 100).toFixed(2)}`
        },
        /* 获取布林带宽 */
        getBollWidth(obj) { // 包含upper, lower数据
            // if (!pre) { return '-' }
            const bollWidth = obj.upper - obj.lower
            return bollWidth.toFixed(2)
        },
        /* 获取斜率 */
        getRatio(suf, pre) { // pre时间前一天， suf后一天
            if (!pre) { return '-' }
            const ratio = (suf.upper - pre.upper) / pre.upper
            return `${((ratio) * 100).toFixed(2)}`
        },
        /* 更新画布配置 */
        updateConfig({ date, data }) {
            /**
             * 表格头 // 取第一个数据name
             */
            const option = this.option;
            const names = data.map(item => item.name).join('&'); // 多标题
            option.title.text = `${this.dataObj.byd.name}-(${names})`;
            // 内容
            option.xAxis = [
                {
                    type: 'category',
                    data: date
                }
            ];
            // 纵坐标数据可能多个类
            option.series = data;
            /* 纵坐标 值类型设置 */
            option.yAxis = {
                type: 'value',
                axisLabel: {
                    formatter: '{value}'
                }
            };
            // data[0].name === '斜率' && (option.yAxis.axisLabel.formatter = '{value}%')
            ['斜率', '带宽斜率'].includes(data[0].name) && (option.yAxis.axisLabel.formatter = '{value}%')
        }

    },
    components: {},
    created() {
    },
    mounted() {
        // this.mixinInit()
    },
    computed: {}
};



// /**
//  * 表格头
//  */
// // option.title.text = `${rzrjData[0].SNAME}-券资比`
// // 内容
// option.xAxis = [
//     {
//         type: 'category',
//         data: date_arr
//     }
// ]

// option.series = [
//     {
//         name: '布林上轨',
//         data: upper_arr,
//         type: 'line'
//     },
//     {
//         name: '斜率',
//         data: ratio_arr,
//         stack: '比值',
//         type: 'line'
//     }
// ]

// 处理数据
// var Datas = []
// Datas.forEach((item, index) => {
// const temp = JSON.parse(JSON.stringify(option))
// setTimeout(() => {
//     // this.myCharts [`myChart${index}`].setOption(temp); // 延时画布生成
//     this.myCharts .myChart0.setOption(temp); // 延时画布生成
//     this.myCharts .myChart1.setOption(temp); // 延时画布生成
// })
// })